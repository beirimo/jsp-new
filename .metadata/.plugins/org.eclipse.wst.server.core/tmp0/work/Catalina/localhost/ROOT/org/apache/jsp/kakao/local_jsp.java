/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.88
 * Generated at: 2024-04-30 06:30:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.kakao;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class local_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("	<h1>지역검색</h1>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div class = \"row mb-2\">\r\n");
      out.write("    <form action=\"\" class = \"col-7 col-md-5\" name=\"frm\"> <!-- 서버에 넘길 떄 name으로 넘어가는거 알지? 그러니까 form은 그냥 name으로 변수지정하는거임.-->\r\n");
      out.write("        <div class = \"input-group\">\r\n");
      out.write("            <input name=\"query\" class = \"form-control\" placeholder=\"검색하실 장소를 입력하세요\" value=\"스키야키\">\r\n");
      out.write("            <button class = \"btn btn-primary\">검색</button>\r\n");
      out.write("        </div>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("<div id = \"divLocal\" class=\"row\"></div>\r\n");
      out.write("<div class = \"text-center my-4\"> <!-- my는 마직 y축이라는 뜻-->\r\n");
      out.write("    <button class = \"btn btn-primary\" id = \"prev\">이전</button>\r\n");
      out.write("    <span class = \"mx-2\" id = \"page\"><b>1</b></span> <!-- 같은줄에 하기위해 div아니고 span으로 한거임. -->\r\n");
      out.write("    <button class = \"btn btn-danger\" id = \"next\">다음</button>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 다음 버튼 밑에 지도 불러오기 -->\r\n");
      out.write("<div id=\"map\"></div>\r\n");
      out.write("<script id = \"tempLocal\" type=\"x-handlebars-template\">\r\n");
      out.write("    <table class=\"table table-dark table-striped table-hover\">\r\n");
      out.write("        <tr>\r\n");
      out.write("            <td>장소명</td>\r\n");
      out.write("            <td>주소</td>\r\n");
      out.write("            <td>전화번호</td>\r\n");
      out.write("            <td>위치</td>\r\n");
      out.write("            <td>경도</td>\r\n");
      out.write("            <td>위도</td>\r\n");
      out.write("        </tr>\r\n");
      out.write("        {{#each documents}}\r\n");
      out.write("            <tr>\r\n");
      out.write("                <td>{{place_name}}</td>\r\n");
      out.write("                <td>{{address_name}}</td>\r\n");
      out.write("                <td>{{phone}}</td>\r\n");
      out.write("                <td><button x=\"{{x}}\" y=\"{{y}}\" address=\"{{address_name}}\" class=\"btn btn-success btn-sm location\">위치</button>\r\n");
      out.write("                <td>{{x}}</td>\r\n");
      out.write("                <td>{{y}}</td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <!-- <tr>\r\n");
      out.write("                <td colspan=2>{{body}}</td>\r\n");
      out.write("            </tr> -->\r\n");
      out.write("        {{/each}}\r\n");
      out.write("    </table>    \r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("    let query=$(frm.query).val(); // jquery는 name을 가져올때 쌩으로 쓴다.\r\n");
      out.write("    let page = 1;\r\n");
      out.write("    dataGet();\r\n");
      out.write("    \r\n");
      out.write("    //위치버튼을 클릭한 경우 지도들고오기 \r\n");
      out.write("    $(\"#divLocal\").on(\"click\", \".location\", function(){\r\n");
      out.write("        const x=$(this).attr(\"x\"); // x값 들고오기\r\n");
      out.write("        const y=$(this).attr(\"y\"); // y값 들고오기\r\n");
      out.write("        // alert(x + \":\" + y);\r\n");
      out.write("        var mapContainer = document.getElementById('map'), // 지도를 표시할 div \r\n");
      out.write("        mapOption = { \r\n");
      out.write("        center: new kakao.maps.LatLng(y, x), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("        };\r\n");
      out.write("\r\n");
      out.write("        var map = new kakao.maps.Map(mapContainer, mapOption);\r\n");
      out.write("\r\n");
      out.write("        // 마커가 표시될 위치입니다 \r\n");
      out.write("        var markerPosition  = new kakao.maps.LatLng(y, x); \r\n");
      out.write("\r\n");
      out.write("        // 마커를 생성합니다\r\n");
      out.write("        var marker = new kakao.maps.Marker({\r\n");
      out.write("            position: markerPosition\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마커가 지도 위에 표시되도록 설정합니다\r\n");
      out.write("        marker.setMap(map);\r\n");
      out.write("\r\n");
      out.write("        // 마커가 드래그 가능하도록 설정합니다 \r\n");
      out.write("        marker.setDraggable(true); \r\n");
      out.write("\r\n");
      out.write("        // 마커에 커서가 오버됐을 때 마커 위에 표시할 인포윈도우를 생성합니다\\\r\n");
      out.write("        var str = $(this).attr(\"address\");\r\n");
      out.write("            str += \"<br>\"\r\n");
      out.write("            str += \"<br>\"\r\n");
      out.write("            \r\n");
      out.write("        var iwContent = '<div style=\"width: 100%;\">' + str + '</div>'; // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다\r\n");
      out.write("\r\n");
      out.write("        // 인포윈도우를 생성합니다\r\n");
      out.write("        var infowindow = new kakao.maps.InfoWindow({\r\n");
      out.write("            content : iwContent\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마커에 마우스오버 이벤트를 등록합니다\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseover', function() {\r\n");
      out.write("        // 마커에 마우스오버 이벤트가 발생하면 인포윈도우를 마커위에 표시합니다\r\n");
      out.write("            infowindow.open(map, marker);\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // 마커에 마우스아웃 이벤트를 등록합니다\r\n");
      out.write("        kakao.maps.event.addListener(marker, 'mouseout', function() {\r\n");
      out.write("            // 마커에 마우스아웃 이벤트가 발생하면 인포윈도우를 제거합니다\r\n");
      out.write("            infowindow.close();\r\n");
      out.write("        });\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    //다음과 이전버튼\r\n");
      out.write("    $(\"#next\").on(\"click\", function(){//page를 1업하고 싶은데 page의 변수가 없으니 전역변수로 하나 설정해주자\r\n");
      out.write("        page++;\r\n");
      out.write("        dataGet();\r\n");
      out.write("    });\r\n");
      out.write("    $(\"#prev\").on(\"click\", function(){//page를 1업하고 싶은데 page의 변수가 없으니 전역변수로 하나 설정해주자\r\n");
      out.write("        page--;\r\n");
      out.write("        dataGet();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    $(frm).on(\"submit\", function(event){\r\n");
      out.write("        event.preventDefault();\r\n");
      out.write("        query = $(frm.query).val();\r\n");
      out.write("        if(query == \"\"){\r\n");
      out.write("            alert(\"검색어를 입력하세요\");\r\n");
      out.write("        }else{\r\n");
      out.write("            page = 1;\r\n");
      out.write("            dataGet();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    function dataGet(){ //데이터를 가져오는 함수다.\r\n");
      out.write("        $.ajax({\r\n");
      out.write("            type:\"get\",\r\n");
      out.write("            url:\"https://dapi.kakao.com/v2/local/search/keyword.json\",\r\n");
      out.write("            dataType:\"json\",\r\n");
      out.write("            data:{query: query, size:10, page:page}, //어떤거 검색할건지\r\n");
      out.write("            headers:{\"Authorization\":\"KakaoAK 89e3021ad2846184fd12b67daf705b0f\"},\r\n");
      out.write("            success:function(data){\r\n");
      out.write("                // alert(\"성공~\");\r\n");
      out.write("                console.log(data);\r\n");
      out.write("                const temp = Handlebars.compile($(\"#tempLocal\").html()); // tempBook 템플릿을 html형식으로 컴파일해서 temp에 넣어주기\r\n");
      out.write("                $(\"#divLocal\").html(temp(data)); //divBook에 컴파일한temp안에 데이터를 넣고 html형식의. \r\n");
      out.write("                const last = Math.ceil(data.meta.pageable_count/10);\r\n");
      out.write("                $(\"#page\").html(page + \"/\" +last);\r\n");
      out.write("                if(page == 1){\r\n");
      out.write("                    $(\"#prev\").attr(\"disabled\", true)\r\n");
      out.write("                }else{\r\n");
      out.write("                    $(\"#prev\").attr(\"disabled\", false)\r\n");
      out.write("                }\r\n");
      out.write("                if(data.meta.is_end){\r\n");
      out.write("                    $(\"#next\").attr(\"disabled\", true)\r\n");
      out.write("                }else{\r\n");
      out.write("                    $(\"#next\").attr(\"disabled\", false)\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("    }\r\n");
      out.write("</script>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
